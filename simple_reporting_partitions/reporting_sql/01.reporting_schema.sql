CREATE SCHEMA IF NOT EXISTS  simple_reporting;

-- DROP TABLE IF EXISTS simple_reporting.SIMPLE_REPORTING_RUNS;
CREATE TABLE IF NOT EXISTS simple_reporting.SIMPLE_REPORTING_RUNS (
    RUN_KEY uuid,
    ACTION_NAME VARCHAR(255),
    START_DATE timestamp default now(), 
    END_DATE timestamp,
    DURATION_IN_SECOND numeric(18,3)  GENERATED ALWAYS AS (extract (epoch from END_DATE - START_DATE)) STORED,
    ACTION_STATUS VARCHAR(255),
    SQL_STATE VARCHAR(255),
    SQL_ERROR_MESSAGE  VARCHAR(255),
    PRIMARY KEY(RUN_KEY, ACTION_NAME)
);

CREATE OR REPLACE PROCEDURE simple_reporting.ADD_MONITORING_ERROR (RUN_ID uuid, ACTION_ID text,INTERNAL_START_DATE timestamp,SQL_STATE text, SQL_ERROR_MESSAGE text)
language plpgsql
as $$
BEGIN
    INSERT into simple_reporting.SIMPLE_REPORTING_RUNS (RUN_KEY, ACTION_NAME, START_DATE, END_DATE, ACTION_STATUS,SQL_STATE,SQL_ERROR_MESSAGE) 
        values (RUN_ID, ACTION_ID, INTERNAL_START_DATE, clock_timestamp(), 'ERROR',SQL_STATE, SQL_ERROR_MESSAGE);
END;
$$;

-- DROP PROCEDURE IF EXISTS simple_reporting.MONITORED_EXECUTE;
CREATE OR REPLACE PROCEDURE simple_reporting.MONITORED_EXECUTE (RUN_ID uuid, ACTION_ID text, TARGET_QUERY text)
language plpgsql
as $$
DECLARE
    INTERNAL_START_DATE timestamp = clock_timestamp();
    EXCEPTION_COUNT numeric = 0;
   
BEGIN
    -- ADDS DEBUG LINE
    RAISE NOTICE 'EXECUTING <%>: %', ACTION_ID, TARGET_QUERY ;
    -- EXECUTES THE QUERY
    begin 
        EXECUTE TARGET_QUERY;
        INSERT into simple_reporting.SIMPLE_REPORTING_RUNS (RUN_KEY, ACTION_NAME, START_DATE, END_DATE, ACTION_STATUS) 
        values (RUN_ID, ACTION_ID, INTERNAL_START_DATE, clock_timestamp(), 'OK');
    EXCEPTION WHEN OTHERS THEN
        EXCEPTION_COUNT := 1;
        call simple_reporting.ADD_MONITORING_ERROR(RUN_ID, ACTION_ID, INTERNAL_START_DATE, SQLSTATE, SQLERRM);
    END;
END;
$$;
