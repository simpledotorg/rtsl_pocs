CREATE SCHEMA IF NOT EXISTS  simple_reporting;
SET SEARCH_PATH = simple_reporting;

-- DROP TABLE IF EXISTS simple_reporting.SIMPLE_REPORTING_RUNS;
CREATE TABLE IF NOT EXISTS simple_reporting.SIMPLE_REPORTING_RUNS (
    RUN_KEY uuid,
    ACTION_NAME VARCHAR(255),
    ACTION_TYPE VARCHAR(255),
    START_DATE timestamp default now(), 
    END_DATE timestamp,
    DURATION_IN_SECOND numeric(18,3)  GENERATED ALWAYS AS (extract (epoch from END_DATE - START_DATE)) STORED,
    ACTION_STATUS VARCHAR(255),
    PRIMARY KEY(RUN_KEY, ACTION_NAME)
);

-- DROP PROCEDURE IF EXISTS simple_reporting.MONITORED_EXECUTE;
CREATE OR REPLACE PROCEDURE simple_reporting.MONITORED_EXECUTE (RUN_ID uuid, ACTION_ID text, TARGET_QUERY text)
language plpgsql
as $$
DECLARE
    TARGET_REFERENCE_DATE date;
   
BEGIN
    -- INSERTS THE AUDIT LINE 
    INSERT into simple_reporting.SIMPLE_REPORTING_RUNS (RUN_KEY, ACTION_NAME, START_DATE) 
    values (RUN_ID, ACTION_ID, clock_timestamp());
    -- ADDS DEBUG LINE
    RAISE NOTICE 'EXECUTING <%>: %', ACTION_ID, TARGET_QUERY ;
    -- EXECUTES THE QUERY
    EXECUTE TARGET_QUERY;
    -- UPDATES AUDIT RECORD
    UPDATE simple_reporting.SIMPLE_REPORTING_RUNS SET END_DATE = clock_timestamp() , ACTION_STATUS= 'OK' 
        where RUN_KEY=RUN_ID and ACTION_NAME = ACTION_ID;
END;
$$;
